---
interface Props {
  label: string;
  items: {
    label: string;
    link: string;
  }[];
}

const { items, label } = Astro.props;
---

<div class="relative inline-block">
  <button
    class="dropdown-button flex items-center gap-1 w-full lg:w-auto lg:px-3 py-2 text-white hover:text-gray-200"
    id={`${label}-dropdown-button`}
  >
    <span>{label}</span>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="3"
      stroke="currentColor"
      class="w-3 h-3 mt-0.5 group-open:rotate-180"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
    </svg>
  </button>
  <ul
    class="dropdown-list origin-top-left absolute left-0 mt-2 w-fit z-20 space-y-2 rounded-sm shadow-lg bg-white ring-1 ring-black ring-opacity-5 py-1 text-base focus:outline-none hidden"
  >
    {
      items.map((item) => (
        <li
          class:list={[
            "text-black hover:bg-gray-200",
            "w-full min-w-48 z-10 px-3",
            "last-child:lg:right-0 last-child:origin-top-right",
            "lg:left-0 origin-top-left",
          ]}
        >
          <a href={item.link} class="block">
            {item.label}
          </a>
        </li>
      ))
    }
  </ul>
  <script>
    [...document.querySelectorAll(".dropdown-button")]?.forEach((button) => {
      button.addEventListener("click", (ev) => {
        // close all dropdowns first
        [...document.querySelectorAll(".dropdown-list")]?.forEach((list) => {
          list.classList.add("hidden");
        });

        // @ts-ignore
        ev.currentTarget.nextElementSibling?.classList.toggle("hidden");
      });
    });
  </script>
</div>
